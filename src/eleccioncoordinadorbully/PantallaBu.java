/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eleccioncoordinadorbully;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ark
 */
public class PantallaBu extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form PantallaBu
     */
    ArrayList <Proceso> listaProcesos;
    Proceso procesoHilo;
    Thread hilo;
    int contador;
    public PantallaBu() {
        initComponents();
        listaProcesos = new ArrayList<>();
        listaProcesos.add(new Proceso(1, 6001, "localhost"));
        listaProcesos.add(new Proceso(2, 6002, "localhost"));
        listaProcesos.add(new Proceso(3, 6003, "localhost"));
        listaProcesos.add(new Proceso(4, 6004, "localhost"));
//        listaProcesos.add(new Proceso(5, 6005, "localhost"));
//        listaProcesos.add(new Proceso(6, 6006, "localhost"));
//        listaProcesos.add(new Proceso(7, 6007, "localhost"));
        contador=0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbxProceso = new javax.swing.JComboBox<>();
        btnInicio = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMensajes = new javax.swing.JTextArea();
        btnPeticion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Proceso");

        cbxProceso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

        btnInicio.setText("Iniciar");
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        txtMensajes.setColumns(20);
        txtMensajes.setRows(5);
        jScrollPane1.setViewportView(txtMensajes);

        btnPeticion.setText("Realizar peticion");
        btnPeticion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPeticionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(39, 39, 39)
                        .addComponent(cbxProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(btnInicio))
                    .addComponent(btnPeticion))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbxProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInicio))
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btnPeticion)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
        // TODO add your handling code here:
        int procesoSeleccionado= cbxProceso.getSelectedIndex()+1;
        procesoHilo= listaProcesos.get(procesoSeleccionado-1);
        listaProcesos.remove(procesoSeleccionado-1);
        txtMensajes.append(procesoHilo.toString()+"\n");
        hilo = new Thread(this);
        hilo.start();
        cbxProceso.setEnabled(false);
    }//GEN-LAST:event_btnInicioActionPerformed

    private void btnPeticionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPeticionActionPerformed
        // TODO add your handling code here:
        lanzarPeticion();
        txtMensajes.append("Lanza peticion"+"\n");
        
        try {
                // TODO add your handling code here:
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(PantallaBu.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        if (contador == 0) {
            txtMensajes.append("El coordinador es: "+procesoHilo.getId()+"\n");
            for (Proceso listaProceso : listaProcesos) {
                enviarMensaje(3, listaProceso);
            }
        }
    }//GEN-LAST:event_btnPeticionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaBu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaBu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaBu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaBu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaBu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInicio;
    private javax.swing.JButton btnPeticion;
    private javax.swing.JComboBox<String> cbxProceso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtMensajes;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        
        try {
            int puertoRecepcion = procesoHilo.getPuerto();
            //DatagramSocket aSocket = new DatagramSocket(6789);
            DatagramSocket aSocket = new DatagramSocket(puertoRecepcion);
            //vector del objeto entrante
            byte[] incoming = new byte[1024];
            while (true) {
                // se recibe el  datagrama del objeto
                DatagramPacket incomingPackte = new DatagramPacket(incoming, incoming.length);
                aSocket.receive(incomingPackte);
//                DatagramPacket request = new DatagramPacket(buffer, buffer.length);
//                aSocket.receive(request);
//se combierte el mensaje recibido a bytes
                byte[] data = incomingPackte.getData();
//objetos para obtener el objeto en el mensaje
                ByteArrayInputStream in = new ByteArrayInputStream(data);
                ObjectInputStream is = new ObjectInputStream(in);
                Mensaje mensaje;
                mensaje = (Mensaje) is.readObject();
                if(mensaje.getTipo()==1){
                    //if(mensaje.getVariable()==1){
                    if(procesoHilo.getId()>mensaje.getVariable()){
                        enviarMensaje(2,mensaje.getProceso());
                        lanzarPeticion();
                    }  
                }else if(mensaje.getTipo()==2){
                    contador++;
//                    if (contador == 0) {
//                    for (Proceso listaProceso : listaProcesos) {
//                        enviarMensaje(3, listaProceso);
//                    }
//                    }
                }
                else if(mensaje.getTipo()==3){
                    if(procesoHilo.getCoordinador().equals("sin")){
                        procesoHilo.setCoordinador(Integer.toString(mensaje.getVariable()));
                        txtMensajes.append("el coordinador es: "+Integer.toString(mensaje.getVariable())+"\n");
                    }
                } 
                
            }
        } catch (SocketException e) {
            System.out.println("Socket: " + e.getMessage());
        } catch (IOException ex) {
            System.out.println("IO: " + ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PantallaBu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void enviarMensaje(int tipoMensaje, Proceso procesoEnvio) {
        try {
            DatagramSocket aSocket = new DatagramSocket();
            //List<Tuplas> ci = new ArrayList<Tuplas>();
            Mensaje me=null;
            if(tipoMensaje==1){
                me = new Mensaje(1, 1, procesoHilo.getId(),procesoHilo);
            }else if (tipoMensaje==2){
                me = new Mensaje(1, 2, 2, null);
            }else if(tipoMensaje==3){
                
                me=new Mensaje(1, 3, procesoHilo.getId(),procesoEnvio);
            }
            

            //Proceso Seleccionado
            System.out.println("Mensaje envia: " + me);

            byte[] incoming = new byte[1024];
            // se ocupa los 2 elementos para poder mandar la clase
            ByteArrayOutputStream outputstream = new ByteArrayOutputStream();
            ObjectOutputStream os = new ObjectOutputStream(outputstream);
            os.writeObject(me);
            //se parsea el objeto a bytes para mandarlo
            byte[] data = outputstream.toByteArray();
            //byte [] m = cad.getBytes();
            //InetAddress aHost = InetAddress.getByName("localhost");
            InetAddress aHost = InetAddress.getByName(procesoEnvio.getDireccion());
            //int serverPort = 6789;
//            int serverPort=Integer.parseInt(txtPuertoEnvio.getText());
            int serverPort = procesoEnvio.getPuerto();
//envio del objecto
            DatagramPacket sendPacket = new DatagramPacket(data, data.length, aHost, serverPort);

//DatagramPacket request = new DatagramPacket(m,cad.length(),
//        aHost,serverPort);
            
            aSocket.send(sendPacket);
        } catch (SocketException ex) {
            Logger.getLogger(PantallaBu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PantallaBu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void lanzarPeticion() {
        //contador = 0;
        for (Proceso listaProceso : listaProcesos) {
            if (listaProceso.getId() > procesoHilo.getId()) {
                enviarMensaje(1, listaProceso);
                //contador++;
            }
        }
//        try {
//                // TODO add your handling code here:
//                Thread.sleep(4000);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(PantallaBu.class.getName()).log(Level.SEVERE, null, ex);
//            }
        
    }
}
